#!/bin/bash
# /etc/init.d/minecraft
# version 0.3.2 2011-01-27 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

# Settings start
USERNAME="minecraft"

SERVICE='minecraft_server.jar'
MCPATH="/home/$USERNAME/my_server"

MEMORY_OPTS="-Xmx4G -Xms2G"
JAVA_OPTIONS=""

INVOCATION="java ${MEMORY_OPTS} ${JAVA_OPTIONS} -jar $SERVICE nogui"
#echo $INVOCATION 
PORT=$(grep server-port $MCPATH/server.properties | cut -d '=' -f 2)
if [ -z "$PORT" ]; then
	PORT=25565
fi

# Settings end

if [ $(whoami) != $USERNAME ]; then
	su $USERNAME -l -c "$(readlink -f $0) $*"
	exit $?
fi

is_running() {
	if [ ! -e $MCPATH/java.pid ]; then
		return 1
	fi
	
	pid=$(cat $MCPATH/java.pid)
	if [ -z $pid ]; then
		return 1
	fi
	
	ps -eo "%p" | grep "^\\s*$pid\\s*\$" > /dev/null
	return $?
}

mc_start() {
	if is_running; then
		echo "Tried to start but $SERVICE was already running!"
	else
		echo "$SERVICE was not running... starting."
		
		cd $MCPATH
		screen -dmS mc$PORT $INVOCATION &
		
		for (( i=0; i < 10; i++ )); do
			screenpid=$(ps -eo '%p %a' | grep -v grep | grep -i screen | grep mc$PORT | awk '{print $1}')
			javapid=$(ps -eo '%P %p' | grep "^\\s*$screenpid " | awk '{print $2}')
			#echo $screenpid
			#echo $javapid
			if [[ -n "$screenpid" && -n "$javapid" ]]; then
				break
			fi
			
			sleep 1
		done
		
		if [[ -n "$screenpid" && -n "$javapid" ]]; then
			echo "$SERVICE is now running."
			echo "$javapid" > $MCPATH/java.pid
			echo "$screenpid.mc$PORT" > $MCPATH/screen.name
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_kill() {
	pid=$(cat $MCPATH/java.pid)

	echo "terminating process with pid $pid"
	kill $pid
	
	for (( i=0; i < 10; i++ )); do
		is_running || break
		sleep 1
	done

	if is_running; then
		echo "$SERVICE could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "$SERVICE killed"
	else
		echo "$SERVICE terminated"
	fi
}

mc_stop() {
	if is_running; then
		echo "$SERVICE is running... stopping."

		mc_exec "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."
		mc_exec "save-all"
		sleep 10
		mc_exec "stop"
		
		for (( i=0; i < 20; i++ )); do
			is_running || break
			sleep 1
		done
	else
		echo "$SERVICE was not running."
	fi
	
	if is_running; then
		echo "$SERVICE could not be shut down cleanly... still running."
		mc_kill
	else
		echo "$SERVICE is shut down."
	fi
	
	rm $MCPATH/java.pid
	rm $MCPATH/screen.name
}

mc_exec() {
	if is_running; then
		#echo -n "start"
		#echo -n "$@$(printf \\r)"
		#echo -n "stop"
		cmd="$@"
		echo "[$SERVICE]: $cmd"
		screen -p 0 -S $(cat $MCPATH/screen.name) -X stuff "$cmd \r"
		#screen -p 0 -S $(cat $MCPATH/screen.name) -X stuff '\r'
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

#Start-Stop here
case "$1" in
  start)
    if mc_start
    then
      echo "Started"
    fi
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  screen)
    if is_running; then
     script /dev/null -q -c "screen -rx $(cat $MCPATH/screen.name)"
    else
      echo "Server is not running."
    fi
    ;;
  exec)
    shift
    mc_exec "$@"
    ;;
  status)
    if is_running
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;

  *)
  echo "Usage: $(readlink -f $0) {start|stop|restart|exec|status|screen}"
  exit 1
  ;;
esac

exit 0
